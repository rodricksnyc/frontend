import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["className", "imageUrl", "style"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import pick from 'lodash/pick';
import { useTranslation } from 'react-i18next';
import { AccountCircle } from '@styled-icons/material-outlined/AccountCircle';
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { Icon } from '../Icon';
import { rippleHandlerKeys, rippleStyle, useRipple, useRippleHandlers } from '../Ripple';
import { mergeClassNames } from '../utils';
import { iconButtonColor } from '../Button/iconButtonColor';
import { buttonSizeMap } from '../Button/size';
export var AvatarButton = styled(forwardRef(function (props, forwardedRef) {
  var className = props.className,
      imageUrl = props.imageUrl,
      style = props.style,
      rest = _objectWithoutProperties(props, _excluded);

  var _useTranslation = useTranslation('AvatarButton'),
      t = _useTranslation.t;

  var _useRipple = useRipple({
    color: 'neutral'
  }),
      callbacks = _useRipple.callbacks,
      rippleClassName = _useRipple.className,
      rippleStyle = _useRipple.style;

  var rippleHandlers = useRippleHandlers(callbacks, _objectSpread({}, pick(_objectSpread({}, rest), rippleHandlerKeys)), rest.disabled);
  return React.createElement("button", _extends({
    className: mergeClassNames([className, rippleClassName]),
    "aria-label": t('Account Menu'),
    ref: forwardedRef
  }, rest, {
    style: _objectSpread(_objectSpread({}, style), rippleStyle)
  }, rippleHandlers), React.createElement(Icon, {
    size: buttonSizeMap.xsmall,
    title: t('Account Icon'),
    icon: React.createElement(AccountCircle, null)
  }), imageUrl && React.createElement("img", {
    alt: t('Profile Picture'),
    className: "default-image",
    src: imageUrl
  }));
})).withConfig({
  displayName: "AvatarButton",
  componentId: "sc-yers8c-0"
})(["", " ", " align-items:center;background:transparent;border:none;color:", ";display:flex;height:", "px;justify-content:center;position:relative;width:", "px;img{border-radius:50%;height:", ";position:absolute;width:", ";}"], iconButtonColor, rippleStyle, function (_ref) {
  var color = _ref.color,
      theme = _ref.theme;
  return color || theme.colors.ui4;
}, buttonSizeMap.large, buttonSizeMap.large, function (_ref2) {
  var theme = _ref2.theme;
  return theme.sizes.medium;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.sizes.medium;
});
//# sourceMappingURL=AvatarButton.js.map