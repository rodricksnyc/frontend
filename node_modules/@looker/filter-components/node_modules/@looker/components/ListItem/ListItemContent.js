var _excluded = ["className", "children", "color", "itemRole", "ripple", "selected", "style"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.array.includes.js";
import "core-js/modules/es.string.includes.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import pick from 'lodash/pick';
import React, { forwardRef } from 'react';
import styled, { css } from 'styled-components';
import { mergeClassNames, useCallbackRef, useMeasuredElement } from '../utils';
import { rippleHandlerKeys, rippleStyle, useRipple, useRippleHandlers } from '../Ripple';
import { listItemColorOptions } from './types';
import { listItemBackgroundColor, listItemPaddingX } from './utils';
var Button = styled.button.attrs(function (_ref) {
  var _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'button' : _ref$type;
  return {
    type: type
  };
}).withConfig({
  displayName: "ListItemContent__Button",
  componentId: "sc-1ietpwm-0"
})(["font-family:inherit;"]);
var Link = styled.a.withConfig({
  displayName: "ListItemContent__Link",
  componentId: "sc-1ietpwm-1"
})([""]);
var Div = styled.div.withConfig({
  displayName: "ListItemContent__Div",
  componentId: "sc-1ietpwm-2"
})([""]);
export var listItemContentCSS = function listItemContentCSS(style) {
  return css(["> ", ",> ", ",> ", "{", "}"], Button, Link, Div, style);
};
export var listItemLabelCSS = listItemContentCSS;
export var ListItemContent = styled(forwardRef(function (_ref2, forwardedRef) {
  var className = _ref2.className,
      children = _ref2.children,
      color = _ref2.color,
      _ref2$itemRole = _ref2.itemRole,
      itemRole = _ref2$itemRole === void 0 ? 'button' : _ref2$itemRole,
      _ref2$ripple = _ref2.ripple,
      ripple = _ref2$ripple === void 0 ? true : _ref2$ripple,
      selected = _ref2.selected,
      style = _ref2.style,
      props = _objectWithoutProperties(_ref2, _excluded);

  var _useCallbackRef = useCallbackRef(forwardedRef),
      _useCallbackRef2 = _slicedToArray(_useCallbackRef, 2),
      element = _useCallbackRef2[0],
      ref = _useCallbackRef2[1];

  var _useMeasuredElement = useMeasuredElement(element),
      _useMeasuredElement2 = _slicedToArray(_useMeasuredElement, 1),
      _useMeasuredElement2$ = _useMeasuredElement2[0],
      height = _useMeasuredElement2$.height,
      width = _useMeasuredElement2$.width;

  var _useRipple = useRipple({
    bounded: true,
    color: selected && listItemColorOptions.includes(color) ? color : 'neutral',
    height: height,
    width: width
  }),
      callbacks = _useRipple.callbacks,
      rippleClassName = _useRipple.className,
      rippleStyle = _useRipple.style;

  var rippleHandlers = useRippleHandlers(callbacks, _objectSpread({}, pick(_objectSpread({}, props), rippleHandlerKeys)), props.disabled);
  var rippleProps = ripple ? _objectSpread(_objectSpread({
    className: mergeClassNames([className, rippleClassName]),
    ref: ref
  }, rippleHandlers), {}, {
    style: _objectSpread(_objectSpread({}, style), rippleStyle)
  }) : {
    className: className,
    ref: ref,
    style: style
  };

  if (!props.disabled && itemRole === 'link') {
    return React.createElement(Link, _extends({}, props, rippleProps), children);
  } else if (itemRole === 'none') {
    return React.createElement(Div, _extends({}, props, rippleProps), children);
  }

  return React.createElement(Button, _extends({}, props, rippleProps, {
    type: "button"
  }), children);
})).withConfig({
  displayName: "ListItemContent",
  componentId: "sc-1ietpwm-3"
})(["", " ", " align-items:center;border:none;color:inherit;cursor:", ";display:flex;flex:1;font-size:inherit;font-weight:inherit;margin:0;min-width:0;outline:none;padding:0;", " position:relative;text-align:left;text-decoration:none;width:100%;&:hover,&:focus{color:inherit;text-decoration:none;}"], listItemBackgroundColor, rippleStyle, function (_ref3) {
  var cursorPointer = _ref3.cursorPointer;
  return cursorPointer ? 'pointer' : undefined;
}, function (_ref4) {
  var density = _ref4.density;
  return listItemPaddingX(density);
});
//# sourceMappingURL=ListItemContent.js.map