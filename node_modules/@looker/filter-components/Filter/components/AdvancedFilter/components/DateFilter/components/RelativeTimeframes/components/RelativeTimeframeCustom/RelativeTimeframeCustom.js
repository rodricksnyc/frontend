import "core-js/modules/es.date.to-string.js";
import "core-js/modules/es.date.now.js";
import "core-js/modules/es.string.small.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { InputDateRange } from '@looker/components-date';
import React from 'react';
import styled from 'styled-components';
import { FILTERS_DATE_FORMAT } from '../../../../utils/format_date';
export var RelativeTimeframeCustom = function RelativeTimeframeCustom(_ref) {
  var value = _ref.value,
      onCustomChange = _ref.onCustomChange;
  var range = typeof value === 'string' ? undefined : value;

  var handleCustomChange = function handleCustomChange() {
    var d = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var newDateRange = _objectSpread({
      from: new Date(Date.now()),
      to: new Date(Date.now())
    }, d);

    onCustomChange(newDateRange);
  };

  return React.createElement(InputWrapper, null, React.createElement(InputDateRange, {
    dateStringFormat: FILTERS_DATE_FORMAT,
    value: range,
    onChange: handleCustomChange
  }));
};
var InputWrapper = styled.div.withConfig({
  displayName: "RelativeTimeframeCustom__InputWrapper",
  componentId: "sc-1snoo6m-0"
})(["padding:", ";& > div{display:flex;flex-direction:column;}"], function (_ref2) {
  var theme = _ref2.theme;
  return theme.space.small;
});
//# sourceMappingURL=RelativeTimeframeCustom.js.map