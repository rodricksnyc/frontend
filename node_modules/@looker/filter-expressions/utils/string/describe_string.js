import "core-js/modules/es.array.join.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.concat.js";
import defaultTo from 'lodash/defaultTo';
import { describeIsItem } from '../summary/describe_is_item';
import { describeNull } from '../summary/describe_null';
import { describeUserAttribute } from '../user_attribute/describe_user_attribute';
import { addQuotes } from './add_quotes';

var describeMultiValue = function describeMultiValue(value) {
  return "".concat(value && value.map(addQuotes).join(' or '));
};

var match = function match(_ref) {
  var is = _ref.is,
      value = _ref.value;
  return "".concat(describeIsItem(is), " ").concat(value && value.length ? describeMultiValue(value) : 'any value');
};

var contains = function contains(_ref2) {
  var is = _ref2.is,
      value = _ref2.value;
  return "".concat(describeIsItem(is, 'contains', 'does not contain', ''), " ").concat(describeMultiValue(value));
};

var startsWith = function startsWith(_ref3) {
  var is = _ref3.is,
      value = _ref3.value;
  return "".concat(describeIsItem(is, 'starts with', 'does not start with', ''), " ").concat(describeMultiValue(value));
};

var endsWith = function endsWith(_ref4) {
  var is = _ref4.is,
      value = _ref4.value;
  return "".concat(describeIsItem(is, 'ends with', 'does not end with', ''), " ").concat(describeMultiValue(value));
};

var blank = function blank(_ref5) {
  var is = _ref5.is;
  return "".concat(describeIsItem(is), " blank");
};

var anyvalue = function anyvalue() {
  return 'is any value';
};

var filterToStringMap = {
  blank: blank,
  "null": describeNull,
  match: match,
  contains: contains,
  startsWith: startsWith,
  endsWith: endsWith,
  user_attribute: describeUserAttribute,
  anyvalue: anyvalue
};
export var describeString = function describeString(item) {
  return defaultTo(filterToStringMap[item.type], function () {
    return '';
  })(item);
};
//# sourceMappingURL=describe_string.js.map