var _excluded = ["runCount"];
import "regenerator-runtime/runtime.js";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import "core-js/modules/es.function.name.js";
import "core-js/modules/es.number.constructor.js";
import "core-js/modules/es.array.some.js";
import "core-js/modules/es.array.every.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.promise.js";
import React, { useEffect, useState, useReducer, useCallback } from 'react';
import values from 'lodash/values';
import get from 'lodash/get';
import { buildPivotFields, isNumeric, tabularPivotResponse, tabularResponse } from '../utils';
import { QueryContext } from './QueryContext';
var initialAsyncState = {
  fetchQueryId: {
    loading: false,
    responseOk: true,
    runCount: 0
  },
  fetchQueryResult: {
    loading: false,
    responseOk: true,
    runCount: 0
  },
  fetchVisConfig: {
    loading: false,
    responseOk: true,
    runCount: 0
  }
};

function asyncStateReducer(state, action) {
  switch (action.type) {
    case 'reset':
      return initialAsyncState;

    case 'update':
      {
        var value = action.value,
            name = action.name;

        var _state$name = state[name],
            runCount = _state$name.runCount,
            currentState = _objectWithoutProperties(_state$name, _excluded);

        return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, name, _objectSpread(_objectSpread({}, currentState), {}, {
          runCount: runCount + 1
        }, value)));
      }
  }
}

var initialDataState = {
  queryId: null,
  data: null,
  visConfig: null,
  fields: null,
  pivots: null,
  shareUrl: null,
  totals: null
};

function dataStateReducer(state, action) {
  switch (action.type) {
    case 'reset':
      return initialDataState;

    case 'update':
      return _objectSpread(_objectSpread({}, state), action.value);
  }
}

export var Query = function Query(_ref) {
  var _fields$measures;

  var query = _ref.query,
      children = _ref.children,
      sdk = _ref.sdk,
      configOverrides = _ref.config;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      error = _useState2[0],
      setError = _useState2[1];

  var _useReducer = useReducer(dataStateReducer, initialDataState),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      dataState = _useReducer2[0],
      dispatchDataReducer = _useReducer2[1];

  var _useReducer3 = useReducer(asyncStateReducer, initialAsyncState),
      _useReducer4 = _slicedToArray(_useReducer3, 2),
      asyncState = _useReducer4[0],
      dispatchAsyncReducer = _useReducer4[1];

  var data = dataState.data,
      fields = dataState.fields,
      pivots = dataState.pivots,
      totals = dataState.totals,
      visConfig = dataState.visConfig,
      shareUrl = dataState.shareUrl,
      queryId = dataState.queryId;

  if (isNumeric(query) && !queryId) {
    dispatchDataReducer({
      type: 'update',
      value: {
        queryId: Number(query)
      }
    });
  }

  var isLoading = values(asyncState).some(function (v) {
    return v.loading === true;
  });
  var isEveryResponseOk = values(asyncState).every(function (v) {
    return v.responseOk === true;
  });
  var isDataShapeValid = Boolean(fields === null || fields === void 0 ? void 0 : (_fields$measures = fields.measures) === null || _fields$measures === void 0 ? void 0 : _fields$measures.length);
  var isDataValid = isEveryResponseOk && (data === null || data === void 0 ? void 0 : data.length) && isDataShapeValid;
  useEffect(function () {
    dispatchAsyncReducer({
      type: 'reset'
    });
    dispatchDataReducer({
      type: 'reset'
    });
  }, [query, sdk]);
  var asyncLifecycle = useCallback(function () {
    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee(name, request) {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(asyncState[name].loading !== true && asyncState[name].runCount === 0 && isEveryResponseOk)) {
                _context.next = 14;
                break;
              }

              dispatchAsyncReducer({
                type: 'update',
                name: name,
                value: {
                  loading: true
                }
              });
              _context.prev = 2;
              _context.next = 5;
              return request();

            case 5:
              _context.next = 13;
              break;

            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](2);

              if (_context.t0 instanceof Error) {
                _context.next = 11;
                break;
              }

              throw _context.t0;

            case 11:
              dispatchAsyncReducer({
                type: 'update',
                name: name,
                value: {
                  responseOk: false
                }
              });
              setError(_objectSpread(_objectSpread({}, _context.t0), {}, {
                documentation_url: 'https://docs.looker.com',
                message: "".concat(name, ": ").concat(_context.t0.message)
              }));

            case 13:
              dispatchAsyncReducer({
                type: 'update',
                name: name,
                value: {
                  loading: false
                }
              });

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[2, 7]]);
    }));

    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }(), [dispatchAsyncReducer, setError, asyncState, isEveryResponseOk]);
  useEffect(function () {
    var fetchQueryId = function () {
      var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(slug) {
        var result, value;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return sdk.query_for_slug(slug, 'id, vis_config, share_url');

              case 2:
                result = _context2.sent;

                if (result.ok === false) {
                  dispatchAsyncReducer({
                    type: 'update',
                    name: 'fetchQueryId',
                    value: {
                      responseOk: false
                    }
                  });
                }

                if ('value' in result) {
                  value = result.value;

                  if ('vis_config' in value) {
                    dispatchDataReducer({
                      type: 'update',
                      value: {
                        visConfig: value.vis_config
                      }
                    });
                  }

                  if ('id' in value) {
                    dispatchDataReducer({
                      type: 'update',
                      value: {
                        queryId: Number(value.id)
                      }
                    });
                  }

                  if ('share_url' in value) {
                    dispatchDataReducer({
                      type: 'update',
                      value: {
                        shareUrl: String(value.share_url)
                      }
                    });
                  }
                } else {
                  setError(_objectSpread(_objectSpread({}, error), result.error));
                }

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function fetchQueryId(_x3) {
        return _ref3.apply(this, arguments);
      };
    }();

    if (query && !queryId) {
      asyncLifecycle('fetchQueryId', function () {
        return fetchQueryId(query);
      });
    }
  }, [query, error, asyncLifecycle, queryId, sdk]);
  useEffect(function () {
    var fetchQueryResult = function () {
      var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(id) {
        var queryArgs, result, _value, _data, _fields, _pivots, totals_data;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                queryArgs = {
                  query_id: id,
                  result_format: 'json_detail'
                };
                _context3.next = 3;
                return sdk.run_query(queryArgs);

              case 3:
                result = _context3.sent;
                dispatchAsyncReducer({
                  type: 'update',
                  name: 'fetchQueryResult',
                  value: {
                    responseOk: result.ok
                  }
                });

                if (result.ok === false && result.error) {
                  result.error = _objectSpread(_objectSpread({}, result.error), queryArgs);
                  setError(result.error);
                } else if (result.ok === true && result.value) {
                  _value = result.value, _data = _value.data, _fields = _value.fields, _pivots = _value.pivots, totals_data = _value.totals_data;
                  dispatchDataReducer({
                    type: 'update',
                    value: {
                      data: _data,
                      fields: _fields,
                      pivots: _pivots,
                      totals: totals_data
                    }
                  });
                }

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function fetchQueryResult(_x4) {
        return _ref4.apply(this, arguments);
      };
    }();

    var fetchVisConfig = function () {
      var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(id) {
        var config, visConfig, shareUrl;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return sdk.query(id, 'vis_config, share_url');

              case 2:
                config = _context4.sent;
                visConfig = get(config, 'value.vis_config');
                shareUrl = get(config, 'value.share_url');

                if (visConfig) {
                  dispatchDataReducer({
                    type: 'update',
                    value: {
                      visConfig: visConfig
                    }
                  });
                } else {
                  dispatchAsyncReducer({
                    type: 'update',
                    name: 'fetchVisConfig',
                    value: {
                      responseOk: false
                    }
                  });
                }

                if (shareUrl) {
                  dispatchDataReducer({
                    type: 'update',
                    value: {
                      shareUrl: shareUrl
                    }
                  });
                }

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function fetchVisConfig(_x5) {
        return _ref5.apply(this, arguments);
      };
    }();

    if (!!queryId && !data) {
      asyncLifecycle('fetchQueryResult', function () {
        return fetchQueryResult(queryId);
      });
    }

    if (!!queryId && !visConfig) {
      asyncLifecycle('fetchVisConfig', function () {
        return fetchVisConfig(queryId);
      });
    }
  }, [queryId, visConfig, data, asyncLifecycle, sdk]);
  var dataCopy = [];
  var fieldsCopy = {
    dimensions: [],
    measures: []
  };

  if (isDataValid && fields) {
    dataCopy = pivots ? tabularPivotResponse({
      data: data,
      fields: fields,
      pivots: pivots
    }) : tabularResponse(Array.from(data));
    fieldsCopy = pivots ? buildPivotFields({
      fields: fields,
      pivots: pivots
    }) : fields;
  }

  return React.createElement(QueryContext.Provider, {
    value: {
      config: _objectSpread(_objectSpread({}, visConfig), configOverrides),
      data: dataCopy,
      error: error,
      fields: fieldsCopy,
      loading: isLoading,
      ok: isEveryResponseOk,
      shareUrl: shareUrl || undefined,
      totals: totals || undefined
    }
  }, children);
};
//# sourceMappingURL=Query.js.map