{"version":3,"sources":["../../src/Line/Line.tsx"],"names":["React","useContext","Fragment","ThemeContext","DataProvider","LineSeries","XYChart","DEFAULT_HEIGHT","VisWrapper","XYLegend","isArray","get","concatDimensions","getX","getY","getYAxisRange","getSeriesColor","useAxis","useChartTheme","isValidChartData","XYTooltip","Marker","Grid","Line","data","config","height","width","fields","theme","formattedData","XAxis","YAxis","chartMargin","chartTheme","series","lines","measures","map","measure","i","name","visible","style","line_width","shape","id","d","domain","yScale","type","zero","legend"],"mappings":"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","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport type { FC } from 'react'\nimport React, { useContext, Fragment } from 'react'\nimport { ThemeContext } from 'styled-components'\nimport { DataProvider, LineSeries, XYChart } from '@visx/xychart'\nimport type { AxisScaleOutput, AxisScale } from '@visx/axis'\nimport type { LinearScaleConfig } from '@visx/scale'\nimport type {\n  LineProps,\n  SDKRecord,\n  CLineSeries,\n} from '@looker/visualizations-adapters'\nimport { DEFAULT_HEIGHT, VisWrapper } from '@looker/visualizations-adapters'\nimport { XYLegend } from '../XYLegend'\nimport isArray from 'lodash/isArray'\nimport get from 'lodash/get'\nimport {\n  concatDimensions,\n  getX,\n  getY,\n  getYAxisRange,\n  getSeriesColor,\n  useAxis,\n  useChartTheme,\n  isValidChartData,\n} from '../utils'\nimport { XYTooltip } from '../XYTooltip'\nimport { Marker } from '../Marker'\nimport { Grid } from '../Grid'\n\nexport const Line: FC<LineProps> = ({\n  data,\n  config,\n  height = DEFAULT_HEIGHT,\n  width,\n  fields,\n}) => {\n  const theme = useContext(ThemeContext)\n\n  /**\n   * The concatDimensions call will further format the data array returned from\n   * the tabularReponse call. This new array combines existing dimension properties\n   * with a single `dimension` property.\n   */\n  const formattedData = concatDimensions(data, fields)\n\n  const { XAxis, YAxis, chartMargin } = useAxis({\n    config,\n    data: formattedData,\n    fields,\n  })\n\n  const chartTheme = useChartTheme(config.series)\n\n  // Early return if the data response is insufficient\n  if (!isValidChartData(data, fields)) {\n    return null\n  }\n\n  const lines: JSX.Element[] | undefined = fields.measures.map((measure, i) => {\n    const series: CLineSeries = isArray(config.series)\n      ? get(config, ['series', i])\n      : get(config, ['series', measure.name])\n\n    if (!series.visible) return <Fragment key={i}></Fragment>\n\n    const { style, line_width, shape } = series\n    const id = `marker-${shape}-${i}`\n\n    return (\n      <Fragment key={id}>\n        {style !== 'none' && <Marker series={series} id={id} />}\n\n        <LineSeries<\n          AxisScale<AxisScaleOutput>,\n          AxisScale<AxisScaleOutput>,\n          SDKRecord\n        >\n          key={id}\n          dataKey={measure.name}\n          data={formattedData}\n          stroke={getSeriesColor(series, theme)}\n          strokeWidth={line_width}\n          xAccessor={(d: SDKRecord) => getX(d)}\n          yAccessor={(d: SDKRecord) => getY(d, i)}\n          markerMid={`url(#${id})`}\n          markerStart={`url(#${id})`}\n          markerEnd={`url(#${id})`}\n        />\n      </Fragment>\n    )\n  })\n\n  const domain = getYAxisRange({ config, data: formattedData, fields })\n\n  const yScale: LinearScaleConfig<AxisScaleOutput> = {\n    type: 'linear',\n    ...(domain && { domain, zero: false }),\n  }\n\n  return (\n    <DataProvider\n      // these props have been moved from XYChart to DataProvider\n      // this allows us to move DataContext up a level such that we can\n      // render an HTML legend that uses DataContext and an SVG chart\n      // without doing this you would have to render XYChart as a child\n      // of XYChart, which would then require the legend to be SVG-based\n      // because HTML cannot be a child of SVG\n      xScale={{ type: 'band' }}\n      yScale={yScale}\n      theme={chartTheme}\n    >\n      <VisWrapper legend={config.legend}>\n        <XYChart margin={chartMargin} width={width} height={height}>\n          <XAxis />\n          <YAxis />\n          <Grid config={config} />\n          <XYTooltip config={config} data={formattedData} fields={fields} />\n          {lines}\n        </XYChart>\n        <XYLegend config={config} fields={fields} />\n      </VisWrapper>\n    </DataProvider>\n  )\n}\n"],"file":"Line.js"}