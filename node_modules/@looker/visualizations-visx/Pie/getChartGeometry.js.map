{"version":3,"sources":["../../src/Pie/getChartGeometry.ts"],"names":["PIE_SLICE_ZOOM","getConnectorLength","getChartGeometry","width","height","labelWidth","legendType","minChartSize","maxConnectorLength","maxDimension","Math","max","hoverMargin","ceil","canvasCenter","padding","outerRadius","canvasW","canvasH","pieCenterX","pieCenterY"],"mappings":"AA2BA,SAASA,cAAT,QAA+B,gBAA/B;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AAkCA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAKJ;AAAA,MAJ1BC,KAI0B,QAJ1BA,KAI0B;AAAA,MAH1BC,MAG0B,QAH1BA,MAG0B;AAAA,MAF1BC,UAE0B,QAF1BA,UAE0B;AAAA,6BAD1BC,UAC0B;AAAA,MAD1BA,UAC0B,gCADb,QACa;AAC1B,MAAMC,YAAY,GAAGD,UAAU,KAAK,QAAf,GAA0B,EAA1B,GAA+B,GAApD;AAGA,MAAME,kBAAkB,GAAGP,kBAAkB,CAAC,CAAD,EAAI,CAAJ,CAAlB,GAA2B,CAAtD;AAGA,MAAMQ,YAAY,GAAGC,IAAI,CAACC,GAAL,CAASR,KAAT,EAAgBC,MAAhB,EAAwBG,YAAxB,CAArB;AAGA,MAAMK,WAAW,GAAGF,IAAI,CAACG,IAAL,CAAUJ,YAAY,GAAGA,YAAY,GAAGT,cAAxC,CAApB;AAGA,MAAMc,YAAY,GAAG,CAACL,YAAY,GAAGG,WAAhB,IAA+B,CAApD;AAIA,MAAMG,OAAO,GACXT,UAAU,KAAK,QAAf,GAA0BI,IAAI,CAACC,GAAL,CAASN,UAAT,EAAqBG,kBAArB,CAA1B,GAAqE,CADvE;AAIA,MAAMQ,WAAW,GAAGF,YAAY,GAAGF,WAAf,GAA6BG,OAAjD;AAEA,SAAO;AACLE,IAAAA,OAAO,EAAER,YADJ;AAELS,IAAAA,OAAO,EAAET,YAAY,GAAGM,OAFnB;AAGLI,IAAAA,UAAU,EAAEL,YAHP;AAILM,IAAAA,UAAU,EAAEN,YAAY,GAAGC,OAAO,GAAG,CAJhC;AAKLC,IAAAA,WAAW,EAAXA;AALK,GAAP;AAOD,CAnCM","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport type { LegendTypes } from '@looker/visualizations-adapters'\nimport { PIE_SLICE_ZOOM } from './pieConstants'\nimport { getConnectorLength } from './getConnectorLength'\n\ntype GetChartGeometryArgs = {\n  /**\n   *  width passed to the Pie component\n   */\n  width: number\n  /**\n   * height passed to the Pie component\n   */\n  height: number\n  /**\n   * labelWidth white space set aside within svg to render labels\n   */\n  labelWidth: number\n  /**\n   * legendType 'labels' | 'legend'\n   */\n  legendType?: LegendTypes\n}\n\n/**\n * Helper function calculates the values required to render the pie chart\n * SVG element given the provided data and config\n *\n * @returns\n *   canvasW: canvas width;\n *   canvasH: canvas height;\n *   pieCenterX: coordinate for the center point of the pie;\n *   pieCenterY: coordinate for the center point of the pie;\n *   outerRadius: radius of the pie given the available space within the canvas;\n *\n */\n\nexport const getChartGeometry = ({\n  width,\n  height,\n  labelWidth,\n  legendType = 'legend',\n}: GetChartGeometryArgs) => {\n  const minChartSize = legendType === 'legend' ? 50 : 350\n\n  // get the connector length at the top position (value for outer radius argument doesn't matter)\n  const maxConnectorLength = getConnectorLength(0, 1) * 2\n\n  // define a square based on whatever is greater between width & height\n  const maxDimension = Math.max(width, height, minChartSize)\n\n  // define how much of the pie element to preserve for \"pizza crust\" hover effect\n  const hoverMargin = Math.ceil(maxDimension - maxDimension / PIE_SLICE_ZOOM)\n\n  // middle point for pie\n  const canvasCenter = (maxDimension - hoverMargin) / 2\n\n  // when legend type is \"labels\", set aside enough white space to render label\n  // content within the svg area\n  const padding =\n    legendType === 'labels' ? Math.max(labelWidth, maxConnectorLength) : 0\n\n  // size the pie chart based on canvas size, minus the required white space\n  const outerRadius = canvasCenter - hoverMargin - padding\n\n  return {\n    canvasW: maxDimension,\n    canvasH: maxDimension - padding, // less vertical space required when legend type is \"labels\"\n    pieCenterX: canvasCenter,\n    pieCenterY: canvasCenter - padding / 2,\n    outerRadius,\n  }\n}\n"],"file":"getChartGeometry.js"}