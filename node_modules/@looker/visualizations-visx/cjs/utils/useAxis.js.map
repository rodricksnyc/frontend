{"version":3,"sources":["../../../src/utils/useAxis.tsx"],"names":["DEFAULT_MARGIN","useAxis","config","data","fields","visxTheme","VisxThemeContext","xAxisLabels","map","datum","dateString","dimension","xAxisLongestLabel","fontFamily","axisStyles","x","bottom","tickLabel","fontSize","xAxisLongestLabelHeight","height","xAxisLongestLabelWidth","width","averageLabelLength","join","length","renderXAxisTicks","x_axis","values","hasRotatedXAxisLabels","angledLabelHypotenuse","Math","sqrt","xAxisStyle","labelDy","tickAngle","tickSpace","tickTextAnchor","XAxisWrapped","label","undefined","renderYAxisTicks","y_axis","yAxisLongestLabel","measures","every","measure","is_numeric","dataRangeStrings","d","String","round","measureNames","measureValues","flatMap","datumMeasureValues","Object","value","y","left","yAxisLongestLabelWidth","yAxisLabelDx","YAxisWrapped","yAxisLabelWidth","chartMarginBottom","chartMarginLeft","max","chartMargin","top","right","XAxis","YAxis"],"mappings":"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","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport pick from 'lodash/pick'\nimport React, { useContext } from 'react'\nimport { ThemeContext as VisxThemeContext } from '@visx/xychart'\nimport {\n  useMeasuredText,\n  pickLongestLabel,\n  getVisibleMeasureNames,\n} from '@looker/visualizations-adapters'\nimport type {\n  ChartData,\n  Fields,\n  CCartesian,\n} from '@looker/visualizations-adapters'\nimport { formatDateLabel } from './formatDateLabel'\nimport { XAxis, YAxis } from '../Axis'\nimport { getYAxisRange } from '.'\n\nexport type UseAxisProps = {\n  config: CCartesian\n  data: ChartData\n  fields: Fields\n}\n\nconst DEFAULT_MARGIN = 50\n\n/**\n * useAxis accepts chart information and outputs axes compatible with\n * a visx XYChart. It also outputs the proper margin object for the calling\n * chart component (necessary when x-axis tick labels are angled).\n */\nexport const useAxis = ({ config, data, fields }: UseAxisProps) => {\n  const visxTheme = useContext(VisxThemeContext)\n\n  /**\n   * Need an array of formatted date strings (i.e. values as if they'd appear on the\n   * x-axis) in order to properly calculate tick spacing\n   */\n  const xAxisLabels = data.map(datum =>\n    formatDateLabel({\n      dateString: datum.dimension,\n      fields,\n    })\n  )\n  const xAxisLongestLabel = pickLongestLabel(xAxisLabels)\n  const {\n    height: xAxisLongestLabelHeight,\n    width: xAxisLongestLabelWidth,\n  } = useMeasuredText(xAxisLongestLabel, {\n    fontFamily: visxTheme.axisStyles.x.bottom.tickLabel.fontFamily || 'Roboto',\n    fontSize: visxTheme.axisStyles.x.bottom.tickLabel.fontSize || '1rem',\n  })\n  const averageLabelLength = xAxisLabels.join('').length / xAxisLabels.length\n\n  const renderXAxisTicks = config?.x_axis?.[0]?.values\n  const hasRotatedXAxisLabels = renderXAxisTicks && averageLabelLength > 10\n  const angledLabelHypotenuse = Math.sqrt(\n    (xAxisLongestLabelWidth * xAxisLongestLabelWidth) / 2\n  )\n\n  const xAxisStyle = hasRotatedXAxisLabels\n    ? {\n        labelDy: angledLabelHypotenuse,\n        tickAngle: -45,\n        tickSpace: xAxisLongestLabelHeight * 2,\n        tickTextAnchor: 'end' as const,\n      }\n    : {\n        labelDy: 0,\n        tickAngle: 0,\n        tickSpace: xAxisLongestLabelWidth + DEFAULT_MARGIN,\n        tickTextAnchor: 'inherit' as const,\n      }\n\n  const XAxisWrapped = () => (\n    <XAxis\n      showTicks={renderXAxisTicks}\n      fields={fields}\n      label={config?.x_axis?.[0]?.label || undefined}\n      {...xAxisStyle}\n    />\n  )\n\n  const renderYAxisTicks = config?.y_axis?.[0]?.values\n\n  /**\n   * If all measures are numeric, we can just use the getDataRange helper.\n   *\n   * Otherwise, treat all measure values as strings.\n   */\n  let yAxisLongestLabel\n  if (fields.measures.every(measure => measure.is_numeric)) {\n    /**\n     * Currently ignoring custom value formats from Looker vis config and instead\n     * assuming y-axis tick values will be integers.\n     *\n     * TODO: Consider value format when determining y-max string.\n     */\n    const dataRangeStrings = getYAxisRange({\n      config,\n      data,\n      fields,\n    }).map(d => String(Math.round(d as number)))\n\n    yAxisLongestLabel = pickLongestLabel(dataRangeStrings)\n  } else {\n    const measureNames = getVisibleMeasureNames(fields, config)\n    const measureValues = data.flatMap(d => {\n      const datumMeasureValues = Object.values(pick(d, measureNames))\n      return datumMeasureValues.map(value => String(value))\n    })\n    yAxisLongestLabel = pickLongestLabel(measureValues)\n  }\n\n  const { width: yAxisLongestLabelWidth } = useMeasuredText(yAxisLongestLabel, {\n    fontFamily: visxTheme.axisStyles.y.left.tickLabel.fontFamily || 'Roboto',\n    fontSize: visxTheme.axisStyles.y.left.tickLabel.fontSize || '1rem',\n  })\n\n  // -10 provides spacing between label and tick values / axis line\n  const yAxisLabelDx = renderYAxisTicks ? -yAxisLongestLabelWidth - 10 : -10\n\n  const YAxisWrapped = () => (\n    <YAxis\n      showTicks={renderYAxisTicks}\n      label={config?.y_axis?.[0]?.label || undefined}\n      labelDx={yAxisLabelDx}\n    />\n  )\n\n  const yAxisLabelWidth = renderYAxisTicks\n    ? yAxisLongestLabelWidth + DEFAULT_MARGIN\n    : DEFAULT_MARGIN\n\n  const chartMarginBottom = hasRotatedXAxisLabels\n    ? angledLabelHypotenuse + DEFAULT_MARGIN\n    : DEFAULT_MARGIN\n  const chartMarginLeft = hasRotatedXAxisLabels\n    ? Math.max(angledLabelHypotenuse, yAxisLabelWidth)\n    : yAxisLabelWidth\n\n  const chartMargin = {\n    top: 0,\n    right: 0,\n    bottom: chartMarginBottom,\n    left: chartMarginLeft,\n  }\n\n  return { XAxis: XAxisWrapped, YAxis: YAxisWrapped, chartMargin }\n}\n"],"file":"useAxis.js"}