"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Visualization = exports.defaultChartComponent = void 0;

require("core-js/modules/es.array.slice.js");

var _react = _interopRequireWildcard(require("react"));

var _components = require("@looker/components");

var _styledComponents = require("styled-components");

var _visualizationsTable = require("@looker/visualizations-table");

var _visualizationsVisx = require("@looker/visualizations-visx");

var _visualizationsSingleValue = require("@looker/visualizations-single-value");

var _visualizationsAdapters = require("@looker/visualizations-adapters");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const defaultChartComponent = {
  area: _visualizationsVisx.Area,
  bar: _visualizationsVisx.Bar,
  column: _visualizationsVisx.Column,
  default: _visualizationsTable.Table,
  line: _visualizationsVisx.Line,
  pie: _visualizationsVisx.Pie,
  scatter: _visualizationsVisx.Scatter,
  single_value: _visualizationsSingleValue.SingleValue,
  sparkline: _visualizationsVisx.Sparkline,
  table: _visualizationsTable.Table
};
exports.defaultChartComponent = defaultChartComponent;

const VisualizationComponent = ({
  debug,
  height,
  width,
  config: configProp
}) => {
  const _useContext = (0, _react.useContext)(_visualizationsAdapters.QueryContext),
        ok = _useContext.ok,
        _useContext$data = _useContext.data,
        data = _useContext$data === void 0 ? [] : _useContext$data,
        error = _useContext.error,
        fields = _useContext.fields,
        totals = _useContext.totals,
        rawConfig = _useContext.config,
        loading = _useContext.loading;

  const rawConfigWithOverrides = _objectSpread(_objectSpread({}, rawConfig), configProp);

  if (loading) {
    return _react.default.createElement(_components.Space, {
      justifyContent: "center",
      p: "small"
    }, _react.default.createElement(_components.ProgressCircular, null));
  }

  if (debug || ok === false) {
    return _react.default.createElement(_visualizationsAdapters.Debug, {
      ok: ok,
      config: rawConfigWithOverrides,
      data: data,
      fields: fields,
      error: error
    });
  } else if (rawConfigWithOverrides && fields) {
    var _x_axis;

    const config = (0, _visualizationsAdapters.buildChartConfig)({
      config: rawConfigWithOverrides,
      data,
      fields
    });
    const xAxisReversed = config === null || config === void 0 ? void 0 : (_x_axis = config.x_axis) === null || _x_axis === void 0 ? void 0 : _x_axis[0].reversed;
    const dataCopy = xAxisReversed ? data.slice().reverse() : data;
    const ChartComponent = defaultChartComponent[config.type];
    return _react.default.createElement(ChartComponent, {
      data: dataCopy,
      config: config,
      fields: fields,
      totals: (0, _visualizationsAdapters.formatTotals)(totals),
      width: width,
      height: height
    });
  } else {
    return null;
  }
};

const Visualization = props => {
  const contextValues = (0, _react.useContext)(_visualizationsAdapters.QueryContext);
  const theme = (0, _react.useContext)(_styledComponents.ThemeContext);

  if (!theme) {
    return _react.default.createElement(_components.ComponentsProvider, null, _react.default.createElement(Visualization, props));
  }

  return _react.default.createElement(_visualizationsAdapters.ErrorBoundary, {
    contextValues: contextValues
  }, _react.default.createElement(VisualizationComponent, props));
};

exports.Visualization = Visualization;
//# sourceMappingURL=Visualization.js.map