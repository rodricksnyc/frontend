import "core-js/modules/es.array.reverse.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { useContext } from 'react';
import { ProgressCircular, Space, ComponentsProvider } from '@looker/components';
import { ThemeContext } from 'styled-components';
import { Table } from '@looker/visualizations-table';
import { Area, Bar, Column, Sparkline, Line, Scatter, Pie } from '@looker/visualizations-visx';
import { SingleValue } from '@looker/visualizations-single-value';
import { buildChartConfig, Debug, QueryContext, ErrorBoundary, formatTotals } from '@looker/visualizations-adapters';
export var defaultChartComponent = {
  area: Area,
  bar: Bar,
  column: Column,
  "default": Table,
  line: Line,
  pie: Pie,
  scatter: Scatter,
  single_value: SingleValue,
  sparkline: Sparkline,
  table: Table
};

var VisualizationComponent = function VisualizationComponent(_ref) {
  var debug = _ref.debug,
      height = _ref.height,
      width = _ref.width,
      configProp = _ref.config;

  var _useContext = useContext(QueryContext),
      ok = _useContext.ok,
      _useContext$data = _useContext.data,
      data = _useContext$data === void 0 ? [] : _useContext$data,
      error = _useContext.error,
      fields = _useContext.fields,
      totals = _useContext.totals,
      rawConfig = _useContext.config,
      loading = _useContext.loading;

  var rawConfigWithOverrides = _objectSpread(_objectSpread({}, rawConfig), configProp);

  if (loading) {
    return React.createElement(Space, {
      justifyContent: "center",
      p: "small"
    }, React.createElement(ProgressCircular, null));
  }

  if (debug || ok === false) {
    return React.createElement(Debug, {
      ok: ok,
      config: rawConfigWithOverrides,
      data: data,
      fields: fields,
      error: error
    });
  } else if (rawConfigWithOverrides && fields) {
    var _x_axis;

    var config = buildChartConfig({
      config: rawConfigWithOverrides,
      data: data,
      fields: fields
    });
    var xAxisReversed = config === null || config === void 0 ? void 0 : (_x_axis = config.x_axis) === null || _x_axis === void 0 ? void 0 : _x_axis[0].reversed;
    var dataCopy = xAxisReversed ? data.slice().reverse() : data;
    var ChartComponent = defaultChartComponent[config.type];
    return React.createElement(ChartComponent, {
      data: dataCopy,
      config: config,
      fields: fields,
      totals: formatTotals(totals),
      width: width,
      height: height
    });
  } else {
    return null;
  }
};

export var Visualization = function Visualization(props) {
  var contextValues = useContext(QueryContext);
  var theme = useContext(ThemeContext);

  if (!theme) {
    return React.createElement(ComponentsProvider, null, React.createElement(Visualization, props));
  }

  return React.createElement(ErrorBoundary, {
    contextValues: contextValues
  }, React.createElement(VisualizationComponent, props));
};
//# sourceMappingURL=Visualization.js.map